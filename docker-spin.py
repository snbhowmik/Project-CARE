# 1. Define dynamic values
python_version = "3.10"
packages_to_install = ["pandas", "scikit-learn", "flask"]
app_filename = "main.py"
maintainer_email = "your-email@example.com"

# 2. Construct the Dockerfile content string using an f-string
# The 'join' method is used to create a space-separated list of packages for the RUN command.
dockerfile_content = f"""
# Dockerfile automatically generated by a Python script

# Use an official Python runtime as a parent image
FROM python:{python_version}-slim

# Set the maintainer label
LABEL maintainer="{maintainer_email}"

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in the script
RUN pip install --no-cache-dir {' '.join(packages_to_install)}

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run the application when the container launches
CMD ["python", "{app_filename}"]
"""

# 3. Write the content to a file named 'Dockerfile'
try:
    with open("Dockerfile", "w") as dockerfile:
        dockerfile.write(dockerfile_content)
    print("✅ Dockerfile created successfully!")
    print("\n--- Content: ---")
    print(dockerfile_content)
except IOError as e:
    print(f"❌ Error writing Dockerfile: {e}")